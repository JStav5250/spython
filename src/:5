let string_of_token_seq lst  =
 let ls = List.map string_of_token lst in
  "\n\nScanned program: \n" ^ (List.fold_left (fun s e -> s ^ "\n" ^ e) "" ls)

let string_of_token (t:Scanner.token) = 
 match t with
   SPACE -> "SPACE" 
 | TAB -> "TAB" 
 | EOL -> "EOL" 
 | ASSIGN -> "ASSIGN" 
 | PLUS -> "PLUS" 
 | MINUS -> "MINUS" 
 | TIMES -> "TIMES" 
 | DIVIDE -> "DIVIDE" 
 | MOD -> "MOD" 
 | EXP -> "EXP" 
 | PLUSEQ -> "PLUSEQ" 
 | MINUSEQ -> "MINUSEQ" 
 | TIMESEQ -> "TIMESEQ" 
 | DIVIDEEQ -> "DIVIDEEQ" 
 | MODEQ -> "MODEQ" 
 | EXPEQ -> "EXPEQ" 
 | LPAREN -> "LPAREN" 
 | RPAREN -> "RPAREN" 
 | LBRACK -> "LBRACK" 
 | RBRACK -> "RBRACK" 
 | LBRACE -> "LBRACE" 
 | RBRACE -> "RBRACE" 
 | SEMI -> "SEMI" 
 | COMMA -> "COMMA" 
 | EQ -> "EQ" 
 | NEQ -> "NEQ" 
 | LT -> "LT" 
 | LEQ -> "LEQ" 
 | GT -> "GT" 
 | GEQ -> "GEQ" 
 | AND -> "AND" 
 | OR -> "OR" 
 | NOT -> "NOT" 
 | IF -> "IF" 
 | ELSE -> "ELSE" 
 | ELIF -> "ELIF" 
 | WHILE -> "WHILE" 
 | FOR -> "FOR" 
 | RETURN -> "RETURN" 
 | BREAK -> "BREAK" 
 | CONTINUE -> "CONTINUE" 
 | DEF -> "DEF" 
 | ARROW -> "ARROW" 
 | COLON -> "COLON" 
 | PRINT -> "PRINT" 
 | RANGE -> "RANGE" 
 | PASS -> "PASS" 
 | ASSERT -> "ASSERT" 
 | BOOL -> "BOOL" 
 | INT -> "INT" 
 | STRING -> "STRING"
 | VARIABLE -> "VARIABLE: " 
 | BOOL_LITERAL -> "BOOL: "
 | INT_LITERAL -> "INT_LITERAL: "
 | FLOAT_LITERAL -> "FLOAT_LITERAL: " 
 | STRING_LITERAL -> "STRING_LITERAL: "
